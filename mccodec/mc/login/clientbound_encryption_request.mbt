///|
/// Encryption Request packet (0x01)
/// Sent by the server to request encryption handshake
struct EncryptionRequestS2C {
  server_id : String // Always empty in vanilla (20 chars max)
  public_key : FixedArray[Byte] // Server's public key, in bytes
  verify_token : FixedArray[Byte] // Random bytes generated by server
  should_authenticate : Bool // Whether to authenticate through Mojang servers
}

///|
impl @mc.Packet for EncryptionRequestS2C with clientbound(self) {
  true
}

///|
impl @mc.Packet for EncryptionRequestS2C with serialize(
  self,
  buf : &@buffer.Buffer,
) {
  @types.write_string(buf, self.server_id)
  @types.write_prefix_array(buf, self.public_key, @buffer.ByteSlice::write_byte)
  @types.write_prefix_array(
    buf,
    self.verify_token,
    @buffer.ByteSlice::write_byte,
  )
  @types.write_bool(buf, self.should_authenticate)
}

///|
impl @mc.Packet for EncryptionRequestS2C with deserialize(buf : &@buffer.Buffer) {
  let server_id = @types.read_string(buf)
  let public_key = @types.read_prefix_array(buf, b => b.read_byte())
  let verify_token = @types.read_prefix_array(buf, b => b.read_byte())
  let should_authenticate = @types.read_bool(buf)
  { server_id, public_key, verify_token, should_authenticate }
}
