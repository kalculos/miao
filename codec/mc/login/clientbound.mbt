///|
/// Disconnect (login) packet (0x00)
/// Sent when the server disconnects a client during login
struct DisconnectLoginS2C {
  reason : String // JSON Text Component
}

///|
impl @mc.Packet for DisconnectLoginS2C with clientbound(self) {
  true
}

///|
/// Encryption Request packet (0x01)
/// Sent by the server to request encryption handshake
struct EncryptionRequestS2C {
  server_id : String // Always empty in vanilla (20 chars max)
  public_key : Array[Byte] // Server's public key, in bytes
  verify_token : Array[Byte] // Random bytes generated by server
  should_authenticate : Bool // Whether to authenticate through Mojang servers
}

///|
impl @mc.Packet for EncryptionRequestS2C with clientbound(self) {
  true
}

///|
/// Login Success packet (0x02)
/// Sent when login is successful, switches to configuration state
struct LoginSuccessS2C {
  profile : String // Game Profile (contains UUID and username)
}

///|
impl @mc.Packet for LoginSuccessS2C with clientbound(self) {
  true
}

///|
/// Set Compression packet (0x03)
/// Enables compression for all following packets (optional)
struct SetCompressionS2C {
  threshold : Int // Maximum packet size before compression
}

///|
impl @mc.Packet for SetCompressionS2C with clientbound(self) {
  true
}

///|
/// Login Plugin Request packet (0x04)
/// Custom handshaking flow for plugin messages
struct LoginPluginRequestS2C {
  message_id : Int // Unique to the connection
  channel : String // Plugin channel identifier
  data : Array[Byte] // Plugin data
}

///|
impl @mc.Packet for LoginPluginRequestS2C with clientbound(self) {
  true
}

///|
/// Cookie Request (login) packet (0x05)
/// Requests a previously stored cookie
struct CookieRequestLoginS2C {
  key : String // Identifier of the cookie
}

///|
impl @mc.Packet for CookieRequestLoginS2C with clientbound(self) {
  true
}