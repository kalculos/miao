///|
/// Cookie Request (configuration) packet (0x00)
/// Requests a cookie that was previously stored
struct CookieRequestConfigS2C {
  key : String // Identifier of the cookie
}

///|
impl @mc.Packet for CookieRequestConfigS2C with clientbound(self) {
  true
}

///|
/// Clientbound Plugin Message (configuration) packet (0x01)
/// Mods and plugins can use this to send data
struct ClientboundPluginMessageConfigS2C {
  channel : String // Plugin channel identifier
  data : Array[Byte] // Plugin data (max 1048576 bytes)
}

///|
impl @mc.Packet for ClientboundPluginMessageConfigS2C with clientbound(self) {
  true
}

///|
/// Disconnect (configuration) packet (0x02)
/// Sent when disconnecting during configuration
struct DisconnectConfigS2C {
  reason : String // Text Component - reason for disconnection
}

///|
impl @mc.Packet for DisconnectConfigS2C with clientbound(self) {
  true
}

///|
/// Finish Configuration packet (0x03)
/// Notifies client that configuration process has finished
struct FinishConfigurationS2C {}

///|
impl @mc.Packet for FinishConfigurationS2C with clientbound(self) {
  true
}

///|
/// Clientbound Keep Alive (configuration) packet (0x04)
/// Server sends to keep connection alive
struct ClientboundKeepAliveConfigS2C {
  keep_alive_id : Int64 // Random ID generated by server
}

///|
impl @mc.Packet for ClientboundKeepAliveConfigS2C with clientbound(self) {
  true
}

///|
/// Ping (configuration) packet (0x05)
/// Server ping packet (not used by vanilla server)
struct PingConfigS2C {
  id : Int // Ping ID
}

///|
impl @mc.Packet for PingConfigS2C with clientbound(self) {
  true
}

///|
/// Reset Chat packet (0x06)
/// Resets chat on the client
struct ResetChatS2C {}

///|
impl @mc.Packet for ResetChatS2C with clientbound(self) {
  true
}

///|
/// Registry Data packet (0x07)
/// Represents registries sent from server to client
struct RegistryDataS2C {
  registry_id : String // Registry identifier
  entries : Array[(String, String)] // Entry ID and NBT data pairs
}

///|
impl @mc.Packet for RegistryDataS2C with clientbound(self) {
  true
}

///|
/// Remove Resource Pack (configuration) packet (0x08)
/// Removes a resource pack from client
struct RemoveResourcePackConfigS2C {
  uuid : String? // UUID of resource pack to remove (if None, removes all)
}

///|
impl @mc.Packet for RemoveResourcePackConfigS2C with clientbound(self) {
  true
}

///|
/// Add Resource Pack (configuration) packet (0x09)
/// Adds a resource pack to client
struct AddResourcePackConfigS2C {
  uuid : String // Unique identifier of resource pack
  url : String // URL to the resource pack
  hash : String // SHA-1 hash (40 chars)
  forced : Bool // Whether client must use the pack
  prompt_message : String? // Prompt message (if present)
}

///|
impl @mc.Packet for AddResourcePackConfigS2C with clientbound(self) {
  true
}

///|
/// Store Cookie (configuration) packet (0x0A)
/// Stores arbitrary data on client
struct StoreCookieConfigS2C {
  key : String // Cookie identifier
  payload : Array[Byte] // Cookie data (up to 5 kiB)
}

///|
impl @mc.Packet for StoreCookieConfigS2C with clientbound(self) {
  true
}

///|
/// Transfer (configuration) packet (0x0B)
/// Notifies client to transfer to another server
struct TransferConfigS2C {
  host : String // Hostname or IP of the server
  port : Int // Port of the server
}

///|
impl @mc.Packet for TransferConfigS2C with clientbound(self) {
  true
}

///|
/// Feature Flags packet (0x0C)
/// Enables and disables features on client
struct FeatureFlagsS2C {
  feature_flags : Array[String] // Array of feature flag identifiers
}

///|
impl @mc.Packet for FeatureFlagsS2C with clientbound(self) {
  true
}

///|
/// Update Tags (configuration) packet (0x0D)
/// Updates tags on client
struct UpdateTagsConfigS2C {
  tags : Array[(String, Array[(String, Array[Int])])] // Registry -> (Tag name -> Entry IDs)
}

///|
impl @mc.Packet for UpdateTagsConfigS2C with clientbound(self) {
  true
}

///|
/// Clientbound Known Packs packet (0x0E)
/// Informs client of which data packs are present
struct ClientboundKnownPacksS2C {
  known_packs : Array[(String, String, String)] // (Namespace, ID, Version) tuples
}

///|
impl @mc.Packet for ClientboundKnownPacksS2C with clientbound(self) {
  true
}

///|
/// Custom Report Details (configuration) packet (0x0F)
/// Contains crash/disconnection report details
struct CustomReportDetailsConfigS2C {
  details : Array[(String, String)] // (Title, Description) pairs (max 32 entries)
}

///|
impl @mc.Packet for CustomReportDetailsConfigS2C with clientbound(self) {
  true
}

///|
/// Server Links (configuration) packet (0x10)
/// Contains server links for pause menu
struct ServerLinksConfigS2C {
  links : Array[(String, String)] // (Label, URL) pairs
}

///|
impl @mc.Packet for ServerLinksConfigS2C with clientbound(self) {
  true
}

///|
/// Clear Dialog (configuration) packet (0x11)
/// Removes current dialog screen
struct ClearDialogConfigS2C {}

///|
impl @mc.Packet for ClearDialogConfigS2C with clientbound(self) {
  true
}

///|
/// Show Dialog (configuration) packet (0x12)
/// Shows custom dialog screen to client
struct ShowDialogConfigS2C {
  dialog : String // NBT data for dialog definition
}

///|
impl @mc.Packet for ShowDialogConfigS2C with clientbound(self) {
  true
}
